pipeline {
  agent any
  tools {
    jdk 'jdk17'
    maven 'maven'
  }
  environment {
    SCANNER_HOME = tool 'sonar-scanner'
    APP_NAME = "sprint-boot-app"
    RELEASE = "1.0"
    IMAGE_NAME = "myacr1001.azurecr.io/"+"${APP_NAME}"
    IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
  }
  stages {
    stage ('mvn build') {
      steps {
        sh '''
        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
        mvn clean install 
        '''
      } 
    }
    stage ('sonarqube analysis') {
      steps {
        withSonarQubeEnv('sonar-server') {
         sh '''cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean verify sonar:sonar -Dsonar.projectName=spring-boot-app \
         -Dsonar.projectKey=spring-boot-app'''
        }
      }      
    }
    stage ('trivy file scan') {
      steps {
        sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app"
        sh "trivy fs . > tvfile.txt"
      }
    }
    stage ('image build') {
      steps {
        sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app"
        sh '''
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        '''
      }
    }
    stage ('trivy image scan') {
      steps {
        sh '''
        trivy image ${IMAGE_NAME}:${IMAGE_TAG} --scanner vuln --exit-code 0 > tvimage.txt
        '''
      }
    }
    stage ('image push to acr') {
      steps {
        azureCLI commands: [[exportVariablesString: '', script: 'az acr login --name myacr1001.azurecr.io'], [exportVariablesString: '', script: 'docker push -t ${IMAGE_NAME}:${IMAGE_TAG}']], principalCredentialId: 'AzureServicePrinciple'
      }
    }
    stage ('delete image') {
      steps {
        sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
      }
    }
  }
}
